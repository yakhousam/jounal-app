{"version":3,"sources":["Auth.js","App.js","serviceWorker.js","index.js"],"names":["Auth","useState","username","setUsername","password","setPassword","isFormLogin","setIsFormLogin","error","setError","handleChange","e","target","name","value","doLogin","a","preventDefault","console","log","fetch","method","headers","body","JSON","stringify","res","status","json","userId","window","location","replace","doRegister","className","onSubmit","type","placeholder","onChange","onClick","App","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uMAwHeA,MArHf,WAAiB,IAAD,EAGkBC,mBAAS,IAH3B,mBAGPC,EAHO,KAGGC,EAHH,OAIkBF,mBAAS,IAJ3B,mBAIPG,EAJO,KAIGC,EAJH,OAKwBJ,oBAAS,GALjC,mBAKPK,EALO,KAKMC,EALN,OAMYN,mBAAS,IANrB,mBAMPO,EANO,KAMAC,EANA,KAQRC,EAAe,SAAAC,GAAM,IAAD,EACAA,EAAEC,OAAlBC,EADgB,EAChBA,KAAMC,EADU,EACVA,MACD,aAATD,GAAqBV,EAAYW,GACxB,aAATD,GAAqBR,EAAYS,IAEjCC,EAAO,sCAAG,WAAMJ,GAAN,iBAAAK,EAAA,4DACdL,EAAEM,iBACFC,QAAQC,IAAIjB,EAAUE,GAFR,SAGIgB,MAAM,SAAU,CAChCC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CAAEvB,WAAUE,eANrB,UAQK,OALbsB,EAHQ,QAQNC,OARM,iCASOD,EAAIE,OATX,cASNA,EATM,OAWZV,QAAQC,IAAI,kBAAmBS,EAAKC,QACpCC,OAAOC,SAASC,QAAQ,KAZZ,8BAgBI,MAAfN,EAAIC,OAhBO,0CAgBgBlB,EAAS,gBAhBzB,QAiBI,MAAfiB,EAAIC,OACLlB,EAAS,+BAETA,EAAS,yBApBG,0CAAH,sDAwBPwB,EAAU,sCAAG,WAAMtB,GAAN,iBAAAK,EAAA,4DACjBL,EAAEM,iBADe,SAGCG,MAAM,YAAa,CACnCC,OAAQ,MACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CAAEvB,WAAUE,eANlB,cAGXsB,EAHW,gBAQEA,EAAIE,OARN,OAQXA,EARW,OAShBV,QAAQC,IAAI,cAAeO,EAAIC,QAEb,MAAfD,EAAIC,SAENT,QAAQC,IAAI,sBACZW,OAAOC,SAASC,QAAQ,MAGR,MAAfN,EAAIC,QACLlB,EAASmB,EAAKpB,OAEE,MAAfkB,EAAIC,QACLlB,EAASmB,EAAKpB,OArBC,0CAAH,sDAyBhB,OACE,yBAAK0B,UAAU,aACb,yBAAKA,UAAU,gBACb,gCAAS5B,EAAc,QAAU,WAAjC,gBACA,gCAASA,EAAc,QAAU,WAAjC,iBAEF,yBAAK4B,UAAU,eACb,0BAAMC,SAAU7B,EAAcS,EAAUkB,GACrCzB,GAAS,6BAAMA,GAChB,2BACEK,KAAK,WACLuB,KAAK,OACLC,YAAY,WACZvB,MAAOZ,EACPoC,SAAU5B,IAEZ,2BACEG,KAAK,WACLuB,KAAK,WACLC,YAAY,WACZvB,MAAOV,EACPkC,SAAU5B,IAEZ,2BAAO0B,KAAK,SAAStB,MAAOR,EAAc,QAAU,aACnDA,GACC,+DACoC,IAClC,0BACEiC,QAAS,WACPhC,GAAgBD,KAFpB,cASFA,GACA,4DACiC,IAC/B,0BACEiC,QAAS,WACPhC,GAAgBD,KAFpB,cChGCkC,MAJf,WACE,OAAO,kBAAC,EAAD,OCOWC,QACW,cAA7BX,OAAOC,SAASW,UAEe,UAA7BZ,OAAOC,SAASW,UAEhBZ,OAAOC,SAASW,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.a47bb131.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\n\nfunction Auth() {\n  \n\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [isFormLogin, setIsFormLogin] = useState(true);\n  const [error, setError] = useState(\"\");\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    if (name === \"username\") setUsername(value);\n    if (name === \"password\") setPassword(value);\n  };\n  const doLogin = async e => {\n    e.preventDefault();\n    console.log(username, password);\n    const res = await fetch(`/login`, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ username, password })\n    });\n    if (res.status === 200) {\n      const json = await res.json();\n      // setUser(json.userId);\n      console.log('login user id =', json.userId )\n      window.location.replace(\"/\");\n      // Router.push(\"/\");\n      return\n    }\n    if(res.status === 400) return setError(\"Bad request\");\n    if(res.status === 401) {\n      setError(\"uername or password invalid\");\n    }else{\n      setError('Internal server error')\n      // console.log(\"res.status=\", res.status);\n    }\n  };\n  const doRegister = async e => {\n    e.preventDefault();\n    // console.log(username, password);\n    const res = await fetch(`/register`, {\n      method: \"PUT\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ username, password })\n    });\n    const json = await res.json();\n     console.log(\"res.status=\", res.status);\n    // console.log(\"json =\", json);\n    if (res.status === 201) {\n      // setUser(json.userId);\n      console.log('new user registred')\n      window.location.replace(\"/\");\n      // Router.push(\"/\");\n    }\n    if(res.status === 400) {\n      setError(json.error);\n    }\n    if(res.status === 500) {\n      setError(json.error);\n    }\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"social-login\">\n        <button>{isFormLogin ? \"Login\" : \"Register\"} with google</button>\n        <button>{isFormLogin ? \"Login\" : \"Register\"} with github</button>\n      </div>\n      <div className=\"local-login\">\n        <form onSubmit={isFormLogin ? doLogin : doRegister}>\n          {error && <div>{error}</div>}\n          <input\n            name=\"username\"\n            type=\"text\"\n            placeholder=\"username\"\n            value={username}\n            onChange={handleChange}\n          />\n          <input\n            name=\"password\"\n            type=\"password\"\n            placeholder=\"password\"\n            value={password}\n            onChange={handleChange}\n          />\n          <input type=\"submit\" value={isFormLogin ? \"Login\" : \"Register\"} />\n          {isFormLogin && (\n            <p>\n              Don't have an account yet? Please{\" \"}\n              <span\n                onClick={() => {\n                  setIsFormLogin(!isFormLogin);\n                }}\n              >\n                Register\n              </span>\n            </p>\n          )}\n          {!isFormLogin && (\n            <p>\n              Do you have an account? Please{\" \"}\n              <span\n                onClick={() => {\n                  setIsFormLogin(!isFormLogin);\n                }}\n              >\n                Login\n              </span>\n            </p>\n          )}\n        </form>\n      </div>\n\n     \n    </div>\n  );\n}\nexport default Auth;\n","import React from 'react';\nimport './App.css';\nimport Auth from './Auth';\n\nfunction App() {\n  return <Auth />\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}