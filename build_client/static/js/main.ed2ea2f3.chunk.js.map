{"version":3,"sources":["components/Journal/NotesList.js","components/Journal/SearchBare.js","components/Journal/NoteDisplay.js","components/Journal/Select.js","components/Journal/NavBare.js","components/Journal/ToolBar.js","components/Journal/NewNote.js","components/Journal/index.js","App.js","serviceWorker.js","index.js"],"names":["Notes","props","useState","notes","setNotes","useEffect","a","userId","console","log","query","fetch","res","json","error","getNotes","updateNotes","listNotes","map","note","className","key","_id","onClick","title","text","reverse","SearchBare","titles","setTitles","search","setSearch","getTitles","onSubmit","e","preventDefault","setNoteListQuery","list","placeholder","value","onChange","target","id","i","type","Note","setNote","noteId","getnote","deleteNote","refrech","updateNote","updateOneNote","Select","defaultValue","NavBare","username","href","ToolBar","newNote","NewNote","formData","setForm","addNote","method","headers","body","JSON","stringify","closeNewNote","handelChange","name","Journal","setUsername","setNoteId","noteListQuery","updateNoteId","setUpdateNoteId","updateText","setUpdateText","updateTitle","setUpdateTitle","showNewNote","setShowNewNote","setUpdateNotes","getUsername","setNoteListQueryfn","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ed2ea2f3.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\n// import fetch from \"isomorphic-unfetch\";\n\n\nexport default function Notes(props) {\n  // console.log('entries entries')\n  const [notes, setNotes] = useState([]);\n  useEffect(() => {\n    async function getNotes() {\n      if(!props.userId) return\n      try {\n         console.log('note list useeffect = ', props.query )\n         const res = await fetch(`api/getListeNotes/${props.query || ''}`);\n      \n        const json = await res.json();\n        // console.log(\"getNotes notes=\", json);\n        // console.log('userId =', props.userId)\n        setNotes(json);\n      } catch (error) {\n        console.error(error);\n      }\n    }\n    getNotes();\n  }, [props.updateNotes, props.userId, props.query]);\n  const listNotes = notes.map((note) => {\n    // // console.log('notes id =', note.id)\n    return (\n      <div className=\"note-item\" key={note._id} onClick={() => props.onClick(note._id)}>\n        <h2>{note.title}</h2>\n        <p>{note.text}</p>\n        \n      </div>\n    );\n  }).reverse();\n  return (\n    <div className=\"note-list\">\n      {listNotes}\n     \n    </div>\n  );\n\n}\n","import { useState, useEffect } from \"react\";\n// import fetch from \"isomorphic-unfetch\";\nimport  React from 'react'\n\n\nexport default function SearchBare(props) {\n  const [titles, setTitles] = useState([]);\n  const [search, setSearch] = useState([]);\n  useEffect(() => {\n    // console.log('search bare use effect')\n    const getTitles = async() => {\n      if(!props.userId) return \n      const res = await fetch(`api/getNotesTitles`);\n      const json = await res.json();\n      const titles = json.map(title => title.title)\n      // console.log('searchbare =', titles)\n      setTitles(titles);\n    };\n    getTitles();\n    \n  },[props.updateNotes]);\n\n  const handleChange = (e)=>{\n    setSearch(e.target.value)\n  }\n  const doSearch = (e)=>{\n    e.preventDefault();\n    if(!search) return;\n    const query = `?title=${search}`\n    props.setNoteListQuery(query)\n    setSearch('')\n  }\n  return (\n    <div className=\"search\">\n      <form onSubmit={doSearch}>\n        <input list=\"list-titles\" placeholder=\"Search Entries\" value={search} onChange={handleChange}/>\n        <datalist id=\"list-titles\">\n           {titles.map((title, i)=> <option key={i} value={title}></option>)}\n        </datalist>\n        <input type=\"submit\" value=\"Search\" />\n      </form>\n    \n    </div>\n  );\n}\n","import { useState, useEffect } from \"react\";\n// import fetch from \"isomorphic-unfetch\";\nimport  React from 'react'\n\nexport default function Note(props) {\n  // console.log('props note=', props.noteId)\n  const [note, setNote] = useState(null);\n  useEffect(() => {\n    // console.log('useEffect noteDisplay')\n    const getnote = async () => {\n      if (!props.noteId ) return;\n      const res = await fetch(`api/getNote/${props.noteId}`);\n      const json = await res.json();\n       // console.log('json note one=', json)\n      //  console.log('useEffect noteDisplay 22222')\n      setNote(json);\n    };\n    getnote();\n  },[props.updateNotes, props.noteId]);\n\n  const deleteNote = async (noteId) =>{\n    if(!noteId) return\n    const res = await fetch(`api/deleteNote/${noteId}`)\n    const json = await res.json();\n    // console.log('browser delete note =', res.status)\n    if(json.noteId === noteId){\n      setNote(null)\n      props.refrech();\n    }    \n  }\n\n  const updateNote = async (id) => {\n    props.updateOneNote({id, text: note.text, title: note.title})\n  }\n   \n  return (\n    (note && (\n      <div className=\"note-display\">\n        <h1>{note.title}</h1>\n        <p>{note.text}</p>\n        <div>\n          <button onClick={()=> updateNote(props.noteId)}>edit</button>\n          <button onClick={()=> deleteNote(props.noteId)}>delete</button>\n        </div>\n       \n      </div>\n    )) || (\n      <div className=\"note-display\">\n        \n        \n      </div>\n    )\n  );\n  \n}\n","\nimport  React from 'react'\nconst Select = props => {\n    const handleChange = (e)=>{\n        // console.log('select value = ', e.target.value)\n        const query = e.target.value ? `?date=${e.target.value}` : '';\n        props.setNoteListQuery(query)\n    }\n  return (\n    <select onChange={handleChange}>\n      <option value='month' defaultValue>This month</option>\n      <option value='day'>Today</option>\n      <option value=''>All</option>\n    </select>\n  );\n};\n\nexport default Select","import Select from './Select'\nimport  React from 'react'\nexport default function NavBare(props){\n    return(\n        <div className=\"nav\">\n            <Select setNoteListQuery={props.setNoteListQuery}/>\n            <h1>Journey</h1>\n            <h2>{props.username}</h2>\n            <a href='/logout'>Logout</a>\n           \n        </div>\n    )\n}","\nimport  React from 'react'\nexport default function ToolBar(props){\n    return(\n        <div className='tool-bar'>\n            <button onClick={()=>props.newNote()}></button>\n           \n        </div>\n    )\n}","import { useState } from \"react\";\n// import fetch from \"isomorphic-unfetch\";\nimport  React from 'react'\n\nconst NewNote = props => {\n  // console.log(\"closeNewNote props =\", props.title);\n  const [formData, setForm] = useState({\n    title: props.title || \"\",\n    text: props.text || \"\"\n  });\n\n  const addNote = async () => {\n    const res = await fetch(\n      `api/addNote`,\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({ title: formData.title, text: formData.text })\n      }\n    );\n    const json = await res.json();\n    // console.log(\"closeNewNote json.id =\", json._id);\n\n    setForm({ title: \"\", text: \"\" });\n    props.closeNewNote(json.noteId);\n  };\n\n  const updateNote = async () => {\n    const res = await fetch(`api/updateNote`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        noteId: props.noteId,\n        title: formData.title,\n        text: formData.text\n      })\n    });\n    const json = await res.json();\n    // console.log(\"Update json.id ---------------------=\", json);    \n\n    setForm({ title: \"\", text: \"\" });\n    props.closeNewNote(json.noteId);\n  };\n\n  const handelChange = e => {\n    const { name, value } = e.target;\n    setForm({ ...formData, [name]: value });\n  };\n\n  return (\n    <div className=\"new-note\">\n      <form>\n        <button className=\"btn-close\" onClick={() => props.closeNewNote()}>\n          close\n        </button>\n        <h1>new note</h1>\n        <input\n          name=\"title\"\n          type=\"text\"\n          placeholder=\"title\"\n          value={formData.title}\n          onChange={handelChange}\n        />\n        <textarea name=\"text\" value={formData.text} onChange={handelChange} />\n        {!props.noteId && (\n          <input type=\"button\" value=\"add note\" onClick={addNote} />\n        )}\n        {props.noteId && (\n          <input type=\"button\" value=\"Update note\" onClick={updateNote} />\n        )}\n      </form>\n\n     \n    </div>\n  );\n};\n\nexport default NewNote;\n","// import fetch from 'isomorphic-unfetch'\nimport React, { useState, useEffect, useContext } from \"react\";\nimport NotesList from \"./NotesList\";\nimport SearchBare from \"./SearchBare\";\nimport NoteDisplay from \"./NoteDisplay\";\nimport NavBare from \"./NavBare\";\nimport ToolBar from \"./ToolBar\";\nimport NewNote from \"./NewNote\";\n\n// import userContext from '../UserContext'\n\nexport default function Journal() {\n    // const {user} = useContext(userContext)\n    //  console.log('user context =', user)\n    // const [user, setUser] = useState(\"5d63b8053815719539b66c02\")\n   \n    const [username, setUsername] = useState('')\n    const [noteId, setNoteId] = useState();\n    const [noteListQuery, setNoteListQuery] = useState('');\n\n    const [updateNoteId, setUpdateNoteId] = useState()\n    const [updateText, setUpdateText] = useState()\n    const [updateTitle, setUpdateTitle] = useState()\n\n    const [showNewNote, setShowNewNote] = useState(false);\n    const [updateNotes, setUpdateNotes] = useState(false);\n\n\n  \n     useEffect(()=>{        \n        // console.log('user id', user)\n        const getUsername = async ()=>{\n          // if(!user) return         \n           const res = await fetch(`/getUserInfos`)\n           const json = await res.json();\n           // // // console.log('json home =', json)\n           setUsername(json.username)\n        }\n        getUsername()\n     },[])\n  \n    const displayNote = id => {\n      setNoteId(id);\n    };\n\n    const refrech = ()=>{\n      setUpdateNotes(!updateNotes)\n    }\n\n    const newNote = () => {\n     setShowNewNote(true);      \n    };\n\n\n    const closeNewNote = (id)=>{\n      setShowNewNote(false)\n      setUpdateNoteId(null);\n      setUpdateText(null)\n      setUpdateTitle(null);\n      if (id) {\n        setNoteId(id);\n        refrech()\n      }\n    }\n\n    const updateOneNote = ({id, text, title})=>{\n      if(!id) return;\n     setUpdateNoteId(id);\n     setUpdateText(text)\n     setUpdateTitle(title);\n     setShowNewNote(true)\n     refrech()\n    }\n   \n    const setNoteListQueryfn = (query) =>{\n      setNoteListQuery(query)\n      // console.log('index query =', query)\n    }\n    // console.log('notelistQuery =', noteListQuery)\n    return (\n      \n      <div>\n        <NavBare username={username} setNoteListQuery={setNoteListQueryfn} />\n        <div className=\"container\">\n          <ToolBar newNote={newNote}  showNewNote={showNewNote} />\n          <div className='note-list'>\n            <SearchBare  updateNotes={updateNotes}  setNoteListQuery={setNoteListQueryfn} />\n            <NotesList  onClick={displayNote} updateNotes={updateNotes}  query={noteListQuery}/>\n          </div>\n          <NoteDisplay  className='display-note' noteId={noteId} refrech={refrech} updateOneNote={updateOneNote} updateNotes={updateNotes}/>\n          {showNewNote && <NewNote  closeNewNote={closeNewNote}  noteId={updateNoteId} text={updateText} title={updateTitle} />}\n        \n         \n        </div>\n      </div>\n    );\n  }","import React from 'react';\nimport Journal from './components/Journal'\n\nfunction App() {\n  return (\n    <Journal />\n      \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}